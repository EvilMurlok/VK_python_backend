# Generated by Django 3.2.8 on 2021-12-11 17:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=150, verbose_name='first_name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last_name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('date_of_birth', models.DateField(blank=True, default='2000-01-01', verbose_name='date_of_birth')),
                ('personal_acc_hcs', models.FloatField(default=0.0, verbose_name='personal_acc_hcs')),
                ('personal_acc_landline_phone', models.FloatField(default=0.0, verbose_name='personal_acc_landline_phone')),
                ('personal_acc_distance_phone', models.FloatField(default=0.0, verbose_name='personal_acc_distance_phone')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('flat_number', models.IntegerField(null=True, verbose_name='flat_number')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-personal_acc_hcs'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(max_length=150, verbose_name='city_name')),
                ('street', models.CharField(max_length=150, verbose_name='street')),
                ('house', models.IntegerField(verbose_name='house')),
                ('housing', models.IntegerField(null=True, verbose_name='housing')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ['city_name'],
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_units', models.FloatField(verbose_name='amount_units')),
                ('units', models.CharField(choices=[('m^2', 'square meters'), ('m^3', 'cubic meters'), ('Gcal', 'gigacalories'), ('minutes', 'minutes')], max_length=17, verbose_name='units')),
                ('service', models.CharField(choices=[('hot water', 'hot water'), ('cold water', 'cold water'), ('heating', 'heating'), ('landline phone', 'landline phone'), ('long distance phone', 'long distance phone')], default='hot water', max_length=150, verbose_name='service')),
                ('amount_money', models.FloatField(verbose_name='amount_money')),
                ('period_of_receipt', models.DateField(verbose_name='period_of_receipt')),
                ('users', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='users')),
            ],
            options={
                'verbose_name': 'Receipt',
                'verbose_name_plural': 'Receipts',
                'ordering': ['period_of_receipt'],
            },
        ),
        migrations.AddField(
            model_name='users',
            name='address',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.address', verbose_name='Address'),
        ),
        migrations.AddField(
            model_name='users',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
